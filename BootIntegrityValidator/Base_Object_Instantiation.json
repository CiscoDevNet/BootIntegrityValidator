# Base Object Instantiation

BootIntegrityValidator Initialization

Initialize the object by passing in the KGV JSON file content (read as bytes) along with the signature file content (also read as bytes)

Files:

example_kgv.json

example_kgv.json.signature

example_kgv.json.bad_signature

import logging

import BootIntegrityValidator

logging.basicConfig(.py)

logger = logging.getLogger(__BOOTINTEGRITYVALIDATOR__)

logger.setLevel(logging.DEBUG)

#####################################################################################

#

# Pass in the Known Good Values file to initialize the BootIntegrityValidator

# known_good_values should be bytes.

#   This is a JSON file that has been generated by Cisco that contains the all the

#   known good values for the Boot 0, Boot Loader and OS Hash that will be used

#   to compare the output from a device

#

# known_good_values_signature should be bytes. (optional)

#   This is a signed sha-512 hash of the known_good_values file.  This is signed

#   using a Cisco Signing certificate (subject-name CN=KnownGoodValuesPROD, OU=REL, O=Cisco)

#

# custom_signing_cert should be a file-like object (optional)

#   If the certificate used to signed the known_good_values is not

#   (subject-name CN=KnownGoodValuesPROD, OU=REL, O=Cisco) (See Known_Good_Values_PROD.pem)

#   then the different signing cert can be provided.  The signing certificate MUST be

#   Signed by the Cisco CAs.  The file-like object should contain the x509 in PEM format

#

#####################################################################################

kgv = open("example_kgv.json", "rb")

kgv_sig = open("example_kgv.json.signature", "rb")

kgv_bad_sig = open("example_kgv.json.bad_signature", "rb")

kgv_bytes = kgv.read()

# Initalize the BIV object with a valid signature

biv = BootIntegrityValidator.BootIntegrityValidator(

    known_good_values=kgv_bytes,

    known_good_values_signature=kgv_sig.read(),

    log_level=logging.DEBUG,

)

# Initializing the BIV object with an invalid signature raises an exception

try:

    biv2 = BootIntegrityValidator.BootIntegrityValidator(

        known_good_values=kgv_bytes, known_good_values_signature=kgv_bad_sig.read()

    )

except BootIntegrityValidator.BootIntegrityValidator.ValidationException as e:

    print("Bad signature successfully detected")

# NOT RECOMMENDED:

# If desired the BIV object can be initialized without a signature file

# This does not validate the data passed in.  Validation of the KGV JSON file

# should be performed out of band.

biv = BootIntegrityValidator.BootIntegrityValidator(

    known_good_values=kgv_bytes, log_level=logging.DEBUG
